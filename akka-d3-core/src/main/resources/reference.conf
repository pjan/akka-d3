akka {
  actor {
    serializers {
      akka-d3 = "akka.contrib.d3.protobuf.D3MessageSerializer"
    }
    serialization-bindings {
      "akka.contrib.d3.writeside.AggregateActor$Passivate$" = akka-d3
      "akka.contrib.d3.writeside.AggregateActor$GetState" = akka-d3
      "akka.contrib.d3.writeside.AggregateManager$CommandMessage" = akka-d3
      "akka.contrib.d3.writeside.AggregateManager$GetState" = akka-d3
      "akka.contrib.d3.writeside.AggregateManager$RequestPassivation" = akka-d3
      "akka.contrib.d3.AggregateState" = akka-d3
    }
    serialization-identifiers {
      "akka.contrib.d3.protobuf.D3MessageSerializer" = 1000000
    }
  }

  contrib {
    d3 {
      # Either one of "local", or "cluster"
      topology = "local"

      writeside {
        # Either one of "local", or "cluster" or the
        # FQCN of the AggregateManagerProvider to be used.
        # If empty, it chooses the correct one based on the topology setting.
        provider = "local"

        # Timeout before an Aggregate Actor passivates itself after receiving
        # no messages.
        passivation-timeout = 1 h

        # Timeout of waiting for the command handler to complete calculating
        # the resulting events.
        command-handling-timeout = 20 s

        # Timeout of waiting for a response when 'ask'ing an AggregateRef.
        # In order to get an answer that is consistent with the commands/events
        # handled by the underlying Aggregate Actor, this should be higher than
        # than the `command-handling-timeout`
        ask-timeout = 30 s

        # The Aggregate Actor saves persistent snapshots after this number of
        # persistent events. Snapshots are used to reduce recovery times.
        events-per-snapshot = 100

        # maximum number of messages that are buffered by an AggregateManager actor.
        buffer-size = 100000

        # The id of the dispatcher to use for Aggregate Actors.
        # If not specified, the default dispatcher is used.
        dispatcher = ""

        # Absolute path to the journal plugin configuration entry.
        # If not specified (null or empty), the default journal plugin is used.
        journal.plugin = null

        # Absolute path to the snapshot store plugin configuration entry.
        # If not specified (null or empty), the default snapshot store plugin is used.
        snapshot-store.plugin = null

        # For settings on a per Aggregate level, add the name of the aggregate below,
        # and override each of the above settings when needed. E.g.:
        #
        # user {
        #   passivation-timeout = 5 m
        #   events-per-snapshot = 50
        # }
      }

      readside {

      }

      query {
        # Either one of "empty", "in-memory", or "cassandra" or the
        # FQCN of the AggregateManagerProvider to be used.
        provider = "empty"

        # Absolute path to the read journal plugin configuration entry.
        read-journal.plugin = null

        # For settings on a per Eventstream level, add the name of the eventstream below,
        # and override each of the above settings when needed. E.g.:
        #
        # user {
        #   read-journal.plugin = "my-read-journal
        # }
      }

      utils {
        startup-tasks {
          # Either one of "local", or "cluster".
          # If not set, it chooses the correct one based on the topology setting.
          provider = null
        }
      }
    }
  }
}
